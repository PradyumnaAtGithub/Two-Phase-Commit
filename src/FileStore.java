/**

 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-12-9")
public class FileStore {

  public interface Iface {

    public StatusReport writeFile(RFile rFile) throws SystemException, org.apache.thrift.TException;

    public RFile readFile(String filenameToRead) throws SystemException, org.apache.thrift.TException;

    public StatusReport deleteFile(String filenameToDelete) throws SystemException, org.apache.thrift.TException;

    public StatusReport doVote(RFile rFile, FileOperation fileOperation) throws SystemException, org.apache.thrift.TException;

    public RFile doCommitRead(String filenameToRead) throws SystemException, org.apache.thrift.TException;

    public StatusReport doCommitWrite(RFile rFile) throws SystemException, org.apache.thrift.TException;

    public StatusReport doCommitDelete(String filenameToDelete) throws SystemException, org.apache.thrift.TException;

    public StatusReport doAbort(RFile rFile, FileOperation fileOperation) throws SystemException, org.apache.thrift.TException;

    public RecoveryInformation getRecoveryInformation(String filename, FileOperation fileOperation, String hostname, int port) throws SystemException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void writeFile(RFile rFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void readFile(String filenameToRead, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void deleteFile(String filenameToDelete, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doVote(RFile rFile, FileOperation fileOperation, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doCommitRead(String filenameToRead, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doCommitWrite(RFile rFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doCommitDelete(String filenameToDelete, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void doAbort(RFile rFile, FileOperation fileOperation, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRecoveryInformation(String filename, FileOperation fileOperation, String hostname, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public StatusReport writeFile(RFile rFile) throws SystemException, org.apache.thrift.TException
    {
      send_writeFile(rFile);
      return recv_writeFile();
    }

    public void send_writeFile(RFile rFile) throws org.apache.thrift.TException
    {
      writeFile_args args = new writeFile_args();
      args.setRFile(rFile);
      sendBase("writeFile", args);
    }

    public StatusReport recv_writeFile() throws SystemException, org.apache.thrift.TException
    {
      writeFile_result result = new writeFile_result();
      receiveBase(result, "writeFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "writeFile failed: unknown result");
    }

    public RFile readFile(String filenameToRead) throws SystemException, org.apache.thrift.TException
    {
      send_readFile(filenameToRead);
      return recv_readFile();
    }

    public void send_readFile(String filenameToRead) throws org.apache.thrift.TException
    {
      readFile_args args = new readFile_args();
      args.setFilenameToRead(filenameToRead);
      sendBase("readFile", args);
    }

    public RFile recv_readFile() throws SystemException, org.apache.thrift.TException
    {
      readFile_result result = new readFile_result();
      receiveBase(result, "readFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "readFile failed: unknown result");
    }

    public StatusReport deleteFile(String filenameToDelete) throws SystemException, org.apache.thrift.TException
    {
      send_deleteFile(filenameToDelete);
      return recv_deleteFile();
    }

    public void send_deleteFile(String filenameToDelete) throws org.apache.thrift.TException
    {
      deleteFile_args args = new deleteFile_args();
      args.setFilenameToDelete(filenameToDelete);
      sendBase("deleteFile", args);
    }

    public StatusReport recv_deleteFile() throws SystemException, org.apache.thrift.TException
    {
      deleteFile_result result = new deleteFile_result();
      receiveBase(result, "deleteFile");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteFile failed: unknown result");
    }

    public StatusReport doVote(RFile rFile, FileOperation fileOperation) throws SystemException, org.apache.thrift.TException
    {
      send_doVote(rFile, fileOperation);
      return recv_doVote();
    }

    public void send_doVote(RFile rFile, FileOperation fileOperation) throws org.apache.thrift.TException
    {
      doVote_args args = new doVote_args();
      args.setRFile(rFile);
      args.setFileOperation(fileOperation);
      sendBase("doVote", args);
    }

    public StatusReport recv_doVote() throws SystemException, org.apache.thrift.TException
    {
      doVote_result result = new doVote_result();
      receiveBase(result, "doVote");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doVote failed: unknown result");
    }

    public RFile doCommitRead(String filenameToRead) throws SystemException, org.apache.thrift.TException
    {
      send_doCommitRead(filenameToRead);
      return recv_doCommitRead();
    }

    public void send_doCommitRead(String filenameToRead) throws org.apache.thrift.TException
    {
      doCommitRead_args args = new doCommitRead_args();
      args.setFilenameToRead(filenameToRead);
      sendBase("doCommitRead", args);
    }

    public RFile recv_doCommitRead() throws SystemException, org.apache.thrift.TException
    {
      doCommitRead_result result = new doCommitRead_result();
      receiveBase(result, "doCommitRead");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doCommitRead failed: unknown result");
    }

    public StatusReport doCommitWrite(RFile rFile) throws SystemException, org.apache.thrift.TException
    {
      send_doCommitWrite(rFile);
      return recv_doCommitWrite();
    }

    public void send_doCommitWrite(RFile rFile) throws org.apache.thrift.TException
    {
      doCommitWrite_args args = new doCommitWrite_args();
      args.setRFile(rFile);
      sendBase("doCommitWrite", args);
    }

    public StatusReport recv_doCommitWrite() throws SystemException, org.apache.thrift.TException
    {
      doCommitWrite_result result = new doCommitWrite_result();
      receiveBase(result, "doCommitWrite");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doCommitWrite failed: unknown result");
    }

    public StatusReport doCommitDelete(String filenameToDelete) throws SystemException, org.apache.thrift.TException
    {
      send_doCommitDelete(filenameToDelete);
      return recv_doCommitDelete();
    }

    public void send_doCommitDelete(String filenameToDelete) throws org.apache.thrift.TException
    {
      doCommitDelete_args args = new doCommitDelete_args();
      args.setFilenameToDelete(filenameToDelete);
      sendBase("doCommitDelete", args);
    }

    public StatusReport recv_doCommitDelete() throws SystemException, org.apache.thrift.TException
    {
      doCommitDelete_result result = new doCommitDelete_result();
      receiveBase(result, "doCommitDelete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doCommitDelete failed: unknown result");
    }

    public StatusReport doAbort(RFile rFile, FileOperation fileOperation) throws SystemException, org.apache.thrift.TException
    {
      send_doAbort(rFile, fileOperation);
      return recv_doAbort();
    }

    public void send_doAbort(RFile rFile, FileOperation fileOperation) throws org.apache.thrift.TException
    {
      doAbort_args args = new doAbort_args();
      args.setRFile(rFile);
      args.setFileOperation(fileOperation);
      sendBase("doAbort", args);
    }

    public StatusReport recv_doAbort() throws SystemException, org.apache.thrift.TException
    {
      doAbort_result result = new doAbort_result();
      receiveBase(result, "doAbort");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "doAbort failed: unknown result");
    }

    public RecoveryInformation getRecoveryInformation(String filename, FileOperation fileOperation, String hostname, int port) throws SystemException, org.apache.thrift.TException
    {
      send_getRecoveryInformation(filename, fileOperation, hostname, port);
      return recv_getRecoveryInformation();
    }

    public void send_getRecoveryInformation(String filename, FileOperation fileOperation, String hostname, int port) throws org.apache.thrift.TException
    {
      getRecoveryInformation_args args = new getRecoveryInformation_args();
      args.setFilename(filename);
      args.setFileOperation(fileOperation);
      args.setHostname(hostname);
      args.setPort(port);
      sendBase("getRecoveryInformation", args);
    }

    public RecoveryInformation recv_getRecoveryInformation() throws SystemException, org.apache.thrift.TException
    {
      getRecoveryInformation_result result = new getRecoveryInformation_result();
      receiveBase(result, "getRecoveryInformation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.systemException != null) {
        throw result.systemException;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRecoveryInformation failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void writeFile(RFile rFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      writeFile_call method_call = new writeFile_call(rFile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class writeFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RFile rFile;
      public writeFile_call(RFile rFile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rFile = rFile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("writeFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        writeFile_args args = new writeFile_args();
        args.setRFile(rFile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatusReport getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_writeFile();
      }
    }

    public void readFile(String filenameToRead, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      readFile_call method_call = new readFile_call(filenameToRead, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class readFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filenameToRead;
      public readFile_call(String filenameToRead, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filenameToRead = filenameToRead;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("readFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        readFile_args args = new readFile_args();
        args.setFilenameToRead(filenameToRead);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RFile getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_readFile();
      }
    }

    public void deleteFile(String filenameToDelete, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteFile_call method_call = new deleteFile_call(filenameToDelete, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteFile_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filenameToDelete;
      public deleteFile_call(String filenameToDelete, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filenameToDelete = filenameToDelete;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteFile", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteFile_args args = new deleteFile_args();
        args.setFilenameToDelete(filenameToDelete);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatusReport getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteFile();
      }
    }

    public void doVote(RFile rFile, FileOperation fileOperation, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doVote_call method_call = new doVote_call(rFile, fileOperation, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doVote_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RFile rFile;
      private FileOperation fileOperation;
      public doVote_call(RFile rFile, FileOperation fileOperation, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rFile = rFile;
        this.fileOperation = fileOperation;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doVote", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doVote_args args = new doVote_args();
        args.setRFile(rFile);
        args.setFileOperation(fileOperation);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatusReport getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doVote();
      }
    }

    public void doCommitRead(String filenameToRead, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doCommitRead_call method_call = new doCommitRead_call(filenameToRead, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doCommitRead_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filenameToRead;
      public doCommitRead_call(String filenameToRead, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filenameToRead = filenameToRead;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doCommitRead", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doCommitRead_args args = new doCommitRead_args();
        args.setFilenameToRead(filenameToRead);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RFile getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doCommitRead();
      }
    }

    public void doCommitWrite(RFile rFile, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doCommitWrite_call method_call = new doCommitWrite_call(rFile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doCommitWrite_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RFile rFile;
      public doCommitWrite_call(RFile rFile, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rFile = rFile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doCommitWrite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doCommitWrite_args args = new doCommitWrite_args();
        args.setRFile(rFile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatusReport getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doCommitWrite();
      }
    }

    public void doCommitDelete(String filenameToDelete, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doCommitDelete_call method_call = new doCommitDelete_call(filenameToDelete, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doCommitDelete_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filenameToDelete;
      public doCommitDelete_call(String filenameToDelete, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filenameToDelete = filenameToDelete;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doCommitDelete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doCommitDelete_args args = new doCommitDelete_args();
        args.setFilenameToDelete(filenameToDelete);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatusReport getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doCommitDelete();
      }
    }

    public void doAbort(RFile rFile, FileOperation fileOperation, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      doAbort_call method_call = new doAbort_call(rFile, fileOperation, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class doAbort_call extends org.apache.thrift.async.TAsyncMethodCall {
      private RFile rFile;
      private FileOperation fileOperation;
      public doAbort_call(RFile rFile, FileOperation fileOperation, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rFile = rFile;
        this.fileOperation = fileOperation;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("doAbort", org.apache.thrift.protocol.TMessageType.CALL, 0));
        doAbort_args args = new doAbort_args();
        args.setRFile(rFile);
        args.setFileOperation(fileOperation);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public StatusReport getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_doAbort();
      }
    }

    public void getRecoveryInformation(String filename, FileOperation fileOperation, String hostname, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRecoveryInformation_call method_call = new getRecoveryInformation_call(filename, fileOperation, hostname, port, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRecoveryInformation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filename;
      private FileOperation fileOperation;
      private String hostname;
      private int port;
      public getRecoveryInformation_call(String filename, FileOperation fileOperation, String hostname, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filename = filename;
        this.fileOperation = fileOperation;
        this.hostname = hostname;
        this.port = port;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRecoveryInformation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRecoveryInformation_args args = new getRecoveryInformation_args();
        args.setFilename(filename);
        args.setFileOperation(fileOperation);
        args.setHostname(hostname);
        args.setPort(port);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public RecoveryInformation getResult() throws SystemException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRecoveryInformation();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("writeFile", new writeFile());
      processMap.put("readFile", new readFile());
      processMap.put("deleteFile", new deleteFile());
      processMap.put("doVote", new doVote());
      processMap.put("doCommitRead", new doCommitRead());
      processMap.put("doCommitWrite", new doCommitWrite());
      processMap.put("doCommitDelete", new doCommitDelete());
      processMap.put("doAbort", new doAbort());
      processMap.put("getRecoveryInformation", new getRecoveryInformation());
      return processMap;
    }

    public static class writeFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, writeFile_args> {
      public writeFile() {
        super("writeFile");
      }

      public writeFile_args getEmptyArgsInstance() {
        return new writeFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public writeFile_result getResult(I iface, writeFile_args args) throws org.apache.thrift.TException {
        writeFile_result result = new writeFile_result();
        try {
          result.success = iface.writeFile(args.rFile);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class readFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, readFile_args> {
      public readFile() {
        super("readFile");
      }

      public readFile_args getEmptyArgsInstance() {
        return new readFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public readFile_result getResult(I iface, readFile_args args) throws org.apache.thrift.TException {
        readFile_result result = new readFile_result();
        try {
          result.success = iface.readFile(args.filenameToRead);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class deleteFile<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteFile_args> {
      public deleteFile() {
        super("deleteFile");
      }

      public deleteFile_args getEmptyArgsInstance() {
        return new deleteFile_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteFile_result getResult(I iface, deleteFile_args args) throws org.apache.thrift.TException {
        deleteFile_result result = new deleteFile_result();
        try {
          result.success = iface.deleteFile(args.filenameToDelete);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class doVote<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doVote_args> {
      public doVote() {
        super("doVote");
      }

      public doVote_args getEmptyArgsInstance() {
        return new doVote_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doVote_result getResult(I iface, doVote_args args) throws org.apache.thrift.TException {
        doVote_result result = new doVote_result();
        try {
          result.success = iface.doVote(args.rFile, args.fileOperation);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class doCommitRead<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doCommitRead_args> {
      public doCommitRead() {
        super("doCommitRead");
      }

      public doCommitRead_args getEmptyArgsInstance() {
        return new doCommitRead_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doCommitRead_result getResult(I iface, doCommitRead_args args) throws org.apache.thrift.TException {
        doCommitRead_result result = new doCommitRead_result();
        try {
          result.success = iface.doCommitRead(args.filenameToRead);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class doCommitWrite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doCommitWrite_args> {
      public doCommitWrite() {
        super("doCommitWrite");
      }

      public doCommitWrite_args getEmptyArgsInstance() {
        return new doCommitWrite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doCommitWrite_result getResult(I iface, doCommitWrite_args args) throws org.apache.thrift.TException {
        doCommitWrite_result result = new doCommitWrite_result();
        try {
          result.success = iface.doCommitWrite(args.rFile);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class doCommitDelete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doCommitDelete_args> {
      public doCommitDelete() {
        super("doCommitDelete");
      }

      public doCommitDelete_args getEmptyArgsInstance() {
        return new doCommitDelete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doCommitDelete_result getResult(I iface, doCommitDelete_args args) throws org.apache.thrift.TException {
        doCommitDelete_result result = new doCommitDelete_result();
        try {
          result.success = iface.doCommitDelete(args.filenameToDelete);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class doAbort<I extends Iface> extends org.apache.thrift.ProcessFunction<I, doAbort_args> {
      public doAbort() {
        super("doAbort");
      }

      public doAbort_args getEmptyArgsInstance() {
        return new doAbort_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public doAbort_result getResult(I iface, doAbort_args args) throws org.apache.thrift.TException {
        doAbort_result result = new doAbort_result();
        try {
          result.success = iface.doAbort(args.rFile, args.fileOperation);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

    public static class getRecoveryInformation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRecoveryInformation_args> {
      public getRecoveryInformation() {
        super("getRecoveryInformation");
      }

      public getRecoveryInformation_args getEmptyArgsInstance() {
        return new getRecoveryInformation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRecoveryInformation_result getResult(I iface, getRecoveryInformation_args args) throws org.apache.thrift.TException {
        getRecoveryInformation_result result = new getRecoveryInformation_result();
        try {
          result.success = iface.getRecoveryInformation(args.filename, args.fileOperation, args.hostname, args.port);
        } catch (SystemException systemException) {
          result.systemException = systemException;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("writeFile", new writeFile());
      processMap.put("readFile", new readFile());
      processMap.put("deleteFile", new deleteFile());
      processMap.put("doVote", new doVote());
      processMap.put("doCommitRead", new doCommitRead());
      processMap.put("doCommitWrite", new doCommitWrite());
      processMap.put("doCommitDelete", new doCommitDelete());
      processMap.put("doAbort", new doAbort());
      processMap.put("getRecoveryInformation", new getRecoveryInformation());
      return processMap;
    }

    public static class writeFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, writeFile_args, StatusReport> {
      public writeFile() {
        super("writeFile");
      }

      public writeFile_args getEmptyArgsInstance() {
        return new writeFile_args();
      }

      public AsyncMethodCallback<StatusReport> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StatusReport>() { 
          public void onComplete(StatusReport o) {
            writeFile_result result = new writeFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            writeFile_result result = new writeFile_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, writeFile_args args, org.apache.thrift.async.AsyncMethodCallback<StatusReport> resultHandler) throws TException {
        iface.writeFile(args.rFile,resultHandler);
      }
    }

    public static class readFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, readFile_args, RFile> {
      public readFile() {
        super("readFile");
      }

      public readFile_args getEmptyArgsInstance() {
        return new readFile_args();
      }

      public AsyncMethodCallback<RFile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RFile>() { 
          public void onComplete(RFile o) {
            readFile_result result = new readFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            readFile_result result = new readFile_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, readFile_args args, org.apache.thrift.async.AsyncMethodCallback<RFile> resultHandler) throws TException {
        iface.readFile(args.filenameToRead,resultHandler);
      }
    }

    public static class deleteFile<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteFile_args, StatusReport> {
      public deleteFile() {
        super("deleteFile");
      }

      public deleteFile_args getEmptyArgsInstance() {
        return new deleteFile_args();
      }

      public AsyncMethodCallback<StatusReport> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StatusReport>() { 
          public void onComplete(StatusReport o) {
            deleteFile_result result = new deleteFile_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteFile_result result = new deleteFile_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteFile_args args, org.apache.thrift.async.AsyncMethodCallback<StatusReport> resultHandler) throws TException {
        iface.deleteFile(args.filenameToDelete,resultHandler);
      }
    }

    public static class doVote<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doVote_args, StatusReport> {
      public doVote() {
        super("doVote");
      }

      public doVote_args getEmptyArgsInstance() {
        return new doVote_args();
      }

      public AsyncMethodCallback<StatusReport> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StatusReport>() { 
          public void onComplete(StatusReport o) {
            doVote_result result = new doVote_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doVote_result result = new doVote_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doVote_args args, org.apache.thrift.async.AsyncMethodCallback<StatusReport> resultHandler) throws TException {
        iface.doVote(args.rFile, args.fileOperation,resultHandler);
      }
    }

    public static class doCommitRead<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doCommitRead_args, RFile> {
      public doCommitRead() {
        super("doCommitRead");
      }

      public doCommitRead_args getEmptyArgsInstance() {
        return new doCommitRead_args();
      }

      public AsyncMethodCallback<RFile> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RFile>() { 
          public void onComplete(RFile o) {
            doCommitRead_result result = new doCommitRead_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doCommitRead_result result = new doCommitRead_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doCommitRead_args args, org.apache.thrift.async.AsyncMethodCallback<RFile> resultHandler) throws TException {
        iface.doCommitRead(args.filenameToRead,resultHandler);
      }
    }

    public static class doCommitWrite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doCommitWrite_args, StatusReport> {
      public doCommitWrite() {
        super("doCommitWrite");
      }

      public doCommitWrite_args getEmptyArgsInstance() {
        return new doCommitWrite_args();
      }

      public AsyncMethodCallback<StatusReport> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StatusReport>() { 
          public void onComplete(StatusReport o) {
            doCommitWrite_result result = new doCommitWrite_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doCommitWrite_result result = new doCommitWrite_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doCommitWrite_args args, org.apache.thrift.async.AsyncMethodCallback<StatusReport> resultHandler) throws TException {
        iface.doCommitWrite(args.rFile,resultHandler);
      }
    }

    public static class doCommitDelete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doCommitDelete_args, StatusReport> {
      public doCommitDelete() {
        super("doCommitDelete");
      }

      public doCommitDelete_args getEmptyArgsInstance() {
        return new doCommitDelete_args();
      }

      public AsyncMethodCallback<StatusReport> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StatusReport>() { 
          public void onComplete(StatusReport o) {
            doCommitDelete_result result = new doCommitDelete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doCommitDelete_result result = new doCommitDelete_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doCommitDelete_args args, org.apache.thrift.async.AsyncMethodCallback<StatusReport> resultHandler) throws TException {
        iface.doCommitDelete(args.filenameToDelete,resultHandler);
      }
    }

    public static class doAbort<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, doAbort_args, StatusReport> {
      public doAbort() {
        super("doAbort");
      }

      public doAbort_args getEmptyArgsInstance() {
        return new doAbort_args();
      }

      public AsyncMethodCallback<StatusReport> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<StatusReport>() { 
          public void onComplete(StatusReport o) {
            doAbort_result result = new doAbort_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            doAbort_result result = new doAbort_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, doAbort_args args, org.apache.thrift.async.AsyncMethodCallback<StatusReport> resultHandler) throws TException {
        iface.doAbort(args.rFile, args.fileOperation,resultHandler);
      }
    }

    public static class getRecoveryInformation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRecoveryInformation_args, RecoveryInformation> {
      public getRecoveryInformation() {
        super("getRecoveryInformation");
      }

      public getRecoveryInformation_args getEmptyArgsInstance() {
        return new getRecoveryInformation_args();
      }

      public AsyncMethodCallback<RecoveryInformation> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<RecoveryInformation>() { 
          public void onComplete(RecoveryInformation o) {
            getRecoveryInformation_result result = new getRecoveryInformation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRecoveryInformation_result result = new getRecoveryInformation_result();
            if (e instanceof SystemException) {
                        result.systemException = (SystemException) e;
                        result.setSystemExceptionIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRecoveryInformation_args args, org.apache.thrift.async.AsyncMethodCallback<RecoveryInformation> resultHandler) throws TException {
        iface.getRecoveryInformation(args.filename, args.fileOperation, args.hostname, args.port,resultHandler);
      }
    }

  }

  public static class writeFile_args implements org.apache.thrift.TBase<writeFile_args, writeFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<writeFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeFile_args");

    private static final org.apache.thrift.protocol.TField R_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("rFile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writeFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writeFile_argsTupleSchemeFactory());
    }

    public RFile rFile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      R_FILE((short)1, "rFile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // R_FILE
            return R_FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.R_FILE, new org.apache.thrift.meta_data.FieldMetaData("rFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RFile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeFile_args.class, metaDataMap);
    }

    public writeFile_args() {
    }

    public writeFile_args(
      RFile rFile)
    {
      this();
      this.rFile = rFile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeFile_args(writeFile_args other) {
      if (other.isSetRFile()) {
        this.rFile = new RFile(other.rFile);
      }
    }

    public writeFile_args deepCopy() {
      return new writeFile_args(this);
    }

    @Override
    public void clear() {
      this.rFile = null;
    }

    public RFile getRFile() {
      return this.rFile;
    }

    public writeFile_args setRFile(RFile rFile) {
      this.rFile = rFile;
      return this;
    }

    public void unsetRFile() {
      this.rFile = null;
    }

    /** Returns true if field rFile is set (has been assigned a value) and false otherwise */
    public boolean isSetRFile() {
      return this.rFile != null;
    }

    public void setRFileIsSet(boolean value) {
      if (!value) {
        this.rFile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case R_FILE:
        if (value == null) {
          unsetRFile();
        } else {
          setRFile((RFile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case R_FILE:
        return getRFile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case R_FILE:
        return isSetRFile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeFile_args)
        return this.equals((writeFile_args)that);
      return false;
    }

    public boolean equals(writeFile_args that) {
      if (that == null)
        return false;

      boolean this_present_rFile = true && this.isSetRFile();
      boolean that_present_rFile = true && that.isSetRFile();
      if (this_present_rFile || that_present_rFile) {
        if (!(this_present_rFile && that_present_rFile))
          return false;
        if (!this.rFile.equals(that.rFile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rFile = true && (isSetRFile());
      list.add(present_rFile);
      if (present_rFile)
        list.add(rFile);

      return list.hashCode();
    }

    @Override
    public int compareTo(writeFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRFile()).compareTo(other.isSetRFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rFile, other.rFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeFile_args(");
      boolean first = true;

      sb.append("rFile:");
      if (this.rFile == null) {
        sb.append("null");
      } else {
        sb.append(this.rFile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rFile != null) {
        rFile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeFile_argsStandardSchemeFactory implements SchemeFactory {
      public writeFile_argsStandardScheme getScheme() {
        return new writeFile_argsStandardScheme();
      }
    }

    private static class writeFile_argsStandardScheme extends StandardScheme<writeFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // R_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rFile = new RFile();
                struct.rFile.read(iprot);
                struct.setRFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rFile != null) {
          oprot.writeFieldBegin(R_FILE_FIELD_DESC);
          struct.rFile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeFile_argsTupleSchemeFactory implements SchemeFactory {
      public writeFile_argsTupleScheme getScheme() {
        return new writeFile_argsTupleScheme();
      }
    }

    private static class writeFile_argsTupleScheme extends TupleScheme<writeFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRFile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRFile()) {
          struct.rFile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rFile = new RFile();
          struct.rFile.read(iprot);
          struct.setRFileIsSet(true);
        }
      }
    }

  }

  public static class writeFile_result implements org.apache.thrift.TBase<writeFile_result, writeFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<writeFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("writeFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new writeFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new writeFile_resultTupleSchemeFactory());
    }

    public StatusReport success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusReport.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(writeFile_result.class, metaDataMap);
    }

    public writeFile_result() {
    }

    public writeFile_result(
      StatusReport success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public writeFile_result(writeFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatusReport(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public writeFile_result deepCopy() {
      return new writeFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public StatusReport getSuccess() {
      return this.success;
    }

    public writeFile_result setSuccess(StatusReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public writeFile_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatusReport)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof writeFile_result)
        return this.equals((writeFile_result)that);
      return false;
    }

    public boolean equals(writeFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_systemException = true && (isSetSystemException());
      list.add(present_systemException);
      if (present_systemException)
        list.add(systemException);

      return list.hashCode();
    }

    @Override
    public int compareTo(writeFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("writeFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class writeFile_resultStandardSchemeFactory implements SchemeFactory {
      public writeFile_resultStandardScheme getScheme() {
        return new writeFile_resultStandardScheme();
      }
    }

    private static class writeFile_resultStandardScheme extends StandardScheme<writeFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, writeFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StatusReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, writeFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class writeFile_resultTupleSchemeFactory implements SchemeFactory {
      public writeFile_resultTupleScheme getScheme() {
        return new writeFile_resultTupleScheme();
      }
    }

    private static class writeFile_resultTupleScheme extends TupleScheme<writeFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, writeFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, writeFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new StatusReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class readFile_args implements org.apache.thrift.TBase<readFile_args, readFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<readFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readFile_args");

    private static final org.apache.thrift.protocol.TField FILENAME_TO_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("filenameToRead", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readFile_argsTupleSchemeFactory());
    }

    public String filenameToRead; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME_TO_READ((short)1, "filenameToRead");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME_TO_READ
            return FILENAME_TO_READ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME_TO_READ, new org.apache.thrift.meta_data.FieldMetaData("filenameToRead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readFile_args.class, metaDataMap);
    }

    public readFile_args() {
    }

    public readFile_args(
      String filenameToRead)
    {
      this();
      this.filenameToRead = filenameToRead;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readFile_args(readFile_args other) {
      if (other.isSetFilenameToRead()) {
        this.filenameToRead = other.filenameToRead;
      }
    }

    public readFile_args deepCopy() {
      return new readFile_args(this);
    }

    @Override
    public void clear() {
      this.filenameToRead = null;
    }

    public String getFilenameToRead() {
      return this.filenameToRead;
    }

    public readFile_args setFilenameToRead(String filenameToRead) {
      this.filenameToRead = filenameToRead;
      return this;
    }

    public void unsetFilenameToRead() {
      this.filenameToRead = null;
    }

    /** Returns true if field filenameToRead is set (has been assigned a value) and false otherwise */
    public boolean isSetFilenameToRead() {
      return this.filenameToRead != null;
    }

    public void setFilenameToReadIsSet(boolean value) {
      if (!value) {
        this.filenameToRead = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILENAME_TO_READ:
        if (value == null) {
          unsetFilenameToRead();
        } else {
          setFilenameToRead((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME_TO_READ:
        return getFilenameToRead();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILENAME_TO_READ:
        return isSetFilenameToRead();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readFile_args)
        return this.equals((readFile_args)that);
      return false;
    }

    public boolean equals(readFile_args that) {
      if (that == null)
        return false;

      boolean this_present_filenameToRead = true && this.isSetFilenameToRead();
      boolean that_present_filenameToRead = true && that.isSetFilenameToRead();
      if (this_present_filenameToRead || that_present_filenameToRead) {
        if (!(this_present_filenameToRead && that_present_filenameToRead))
          return false;
        if (!this.filenameToRead.equals(that.filenameToRead))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_filenameToRead = true && (isSetFilenameToRead());
      list.add(present_filenameToRead);
      if (present_filenameToRead)
        list.add(filenameToRead);

      return list.hashCode();
    }

    @Override
    public int compareTo(readFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilenameToRead()).compareTo(other.isSetFilenameToRead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilenameToRead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filenameToRead, other.filenameToRead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readFile_args(");
      boolean first = true;

      sb.append("filenameToRead:");
      if (this.filenameToRead == null) {
        sb.append("null");
      } else {
        sb.append(this.filenameToRead);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readFile_argsStandardSchemeFactory implements SchemeFactory {
      public readFile_argsStandardScheme getScheme() {
        return new readFile_argsStandardScheme();
      }
    }

    private static class readFile_argsStandardScheme extends StandardScheme<readFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME_TO_READ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filenameToRead = iprot.readString();
                struct.setFilenameToReadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filenameToRead != null) {
          oprot.writeFieldBegin(FILENAME_TO_READ_FIELD_DESC);
          oprot.writeString(struct.filenameToRead);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readFile_argsTupleSchemeFactory implements SchemeFactory {
      public readFile_argsTupleScheme getScheme() {
        return new readFile_argsTupleScheme();
      }
    }

    private static class readFile_argsTupleScheme extends TupleScheme<readFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilenameToRead()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFilenameToRead()) {
          oprot.writeString(struct.filenameToRead);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.filenameToRead = iprot.readString();
          struct.setFilenameToReadIsSet(true);
        }
      }
    }

  }

  public static class readFile_result implements org.apache.thrift.TBase<readFile_result, readFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<readFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("readFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new readFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new readFile_resultTupleSchemeFactory());
    }

    public RFile success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RFile.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(readFile_result.class, metaDataMap);
    }

    public readFile_result() {
    }

    public readFile_result(
      RFile success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public readFile_result(readFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new RFile(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public readFile_result deepCopy() {
      return new readFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public RFile getSuccess() {
      return this.success;
    }

    public readFile_result setSuccess(RFile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public readFile_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RFile)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof readFile_result)
        return this.equals((readFile_result)that);
      return false;
    }

    public boolean equals(readFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_systemException = true && (isSetSystemException());
      list.add(present_systemException);
      if (present_systemException)
        list.add(systemException);

      return list.hashCode();
    }

    @Override
    public int compareTo(readFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("readFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class readFile_resultStandardSchemeFactory implements SchemeFactory {
      public readFile_resultStandardScheme getScheme() {
        return new readFile_resultStandardScheme();
      }
    }

    private static class readFile_resultStandardScheme extends StandardScheme<readFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, readFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RFile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, readFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class readFile_resultTupleSchemeFactory implements SchemeFactory {
      public readFile_resultTupleScheme getScheme() {
        return new readFile_resultTupleScheme();
      }
    }

    private static class readFile_resultTupleScheme extends TupleScheme<readFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, readFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, readFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RFile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class deleteFile_args implements org.apache.thrift.TBase<deleteFile_args, deleteFile_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFile_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFile_args");

    private static final org.apache.thrift.protocol.TField FILENAME_TO_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("filenameToDelete", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFile_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFile_argsTupleSchemeFactory());
    }

    public String filenameToDelete; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME_TO_DELETE((short)1, "filenameToDelete");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME_TO_DELETE
            return FILENAME_TO_DELETE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME_TO_DELETE, new org.apache.thrift.meta_data.FieldMetaData("filenameToDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFile_args.class, metaDataMap);
    }

    public deleteFile_args() {
    }

    public deleteFile_args(
      String filenameToDelete)
    {
      this();
      this.filenameToDelete = filenameToDelete;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFile_args(deleteFile_args other) {
      if (other.isSetFilenameToDelete()) {
        this.filenameToDelete = other.filenameToDelete;
      }
    }

    public deleteFile_args deepCopy() {
      return new deleteFile_args(this);
    }

    @Override
    public void clear() {
      this.filenameToDelete = null;
    }

    public String getFilenameToDelete() {
      return this.filenameToDelete;
    }

    public deleteFile_args setFilenameToDelete(String filenameToDelete) {
      this.filenameToDelete = filenameToDelete;
      return this;
    }

    public void unsetFilenameToDelete() {
      this.filenameToDelete = null;
    }

    /** Returns true if field filenameToDelete is set (has been assigned a value) and false otherwise */
    public boolean isSetFilenameToDelete() {
      return this.filenameToDelete != null;
    }

    public void setFilenameToDeleteIsSet(boolean value) {
      if (!value) {
        this.filenameToDelete = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILENAME_TO_DELETE:
        if (value == null) {
          unsetFilenameToDelete();
        } else {
          setFilenameToDelete((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME_TO_DELETE:
        return getFilenameToDelete();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILENAME_TO_DELETE:
        return isSetFilenameToDelete();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFile_args)
        return this.equals((deleteFile_args)that);
      return false;
    }

    public boolean equals(deleteFile_args that) {
      if (that == null)
        return false;

      boolean this_present_filenameToDelete = true && this.isSetFilenameToDelete();
      boolean that_present_filenameToDelete = true && that.isSetFilenameToDelete();
      if (this_present_filenameToDelete || that_present_filenameToDelete) {
        if (!(this_present_filenameToDelete && that_present_filenameToDelete))
          return false;
        if (!this.filenameToDelete.equals(that.filenameToDelete))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_filenameToDelete = true && (isSetFilenameToDelete());
      list.add(present_filenameToDelete);
      if (present_filenameToDelete)
        list.add(filenameToDelete);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFile_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilenameToDelete()).compareTo(other.isSetFilenameToDelete());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilenameToDelete()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filenameToDelete, other.filenameToDelete);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFile_args(");
      boolean first = true;

      sb.append("filenameToDelete:");
      if (this.filenameToDelete == null) {
        sb.append("null");
      } else {
        sb.append(this.filenameToDelete);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFile_argsStandardSchemeFactory implements SchemeFactory {
      public deleteFile_argsStandardScheme getScheme() {
        return new deleteFile_argsStandardScheme();
      }
    }

    private static class deleteFile_argsStandardScheme extends StandardScheme<deleteFile_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFile_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME_TO_DELETE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filenameToDelete = iprot.readString();
                struct.setFilenameToDeleteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFile_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filenameToDelete != null) {
          oprot.writeFieldBegin(FILENAME_TO_DELETE_FIELD_DESC);
          oprot.writeString(struct.filenameToDelete);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFile_argsTupleSchemeFactory implements SchemeFactory {
      public deleteFile_argsTupleScheme getScheme() {
        return new deleteFile_argsTupleScheme();
      }
    }

    private static class deleteFile_argsTupleScheme extends TupleScheme<deleteFile_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilenameToDelete()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFilenameToDelete()) {
          oprot.writeString(struct.filenameToDelete);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFile_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.filenameToDelete = iprot.readString();
          struct.setFilenameToDeleteIsSet(true);
        }
      }
    }

  }

  public static class deleteFile_result implements org.apache.thrift.TBase<deleteFile_result, deleteFile_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteFile_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteFile_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteFile_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteFile_resultTupleSchemeFactory());
    }

    public StatusReport success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusReport.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteFile_result.class, metaDataMap);
    }

    public deleteFile_result() {
    }

    public deleteFile_result(
      StatusReport success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteFile_result(deleteFile_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatusReport(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public deleteFile_result deepCopy() {
      return new deleteFile_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public StatusReport getSuccess() {
      return this.success;
    }

    public deleteFile_result setSuccess(StatusReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public deleteFile_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatusReport)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteFile_result)
        return this.equals((deleteFile_result)that);
      return false;
    }

    public boolean equals(deleteFile_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_systemException = true && (isSetSystemException());
      list.add(present_systemException);
      if (present_systemException)
        list.add(systemException);

      return list.hashCode();
    }

    @Override
    public int compareTo(deleteFile_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteFile_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteFile_resultStandardSchemeFactory implements SchemeFactory {
      public deleteFile_resultStandardScheme getScheme() {
        return new deleteFile_resultStandardScheme();
      }
    }

    private static class deleteFile_resultStandardScheme extends StandardScheme<deleteFile_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteFile_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StatusReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteFile_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteFile_resultTupleSchemeFactory implements SchemeFactory {
      public deleteFile_resultTupleScheme getScheme() {
        return new deleteFile_resultTupleScheme();
      }
    }

    private static class deleteFile_resultTupleScheme extends TupleScheme<deleteFile_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteFile_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new StatusReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class doVote_args implements org.apache.thrift.TBase<doVote_args, doVote_args._Fields>, java.io.Serializable, Cloneable, Comparable<doVote_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doVote_args");

    private static final org.apache.thrift.protocol.TField R_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("rFile", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("fileOperation", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doVote_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doVote_argsTupleSchemeFactory());
    }

    public RFile rFile; // required
    public FileOperation fileOperation; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      R_FILE((short)1, "rFile"),
      FILE_OPERATION((short)2, "fileOperation");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // R_FILE
            return R_FILE;
          case 2: // FILE_OPERATION
            return FILE_OPERATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.R_FILE, new org.apache.thrift.meta_data.FieldMetaData("rFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RFile.class)));
      tmpMap.put(_Fields.FILE_OPERATION, new org.apache.thrift.meta_data.FieldMetaData("fileOperation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileOperation.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doVote_args.class, metaDataMap);
    }

    public doVote_args() {
    }

    public doVote_args(
      RFile rFile,
      FileOperation fileOperation)
    {
      this();
      this.rFile = rFile;
      this.fileOperation = fileOperation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doVote_args(doVote_args other) {
      if (other.isSetRFile()) {
        this.rFile = new RFile(other.rFile);
      }
      if (other.isSetFileOperation()) {
        this.fileOperation = new FileOperation(other.fileOperation);
      }
    }

    public doVote_args deepCopy() {
      return new doVote_args(this);
    }

    @Override
    public void clear() {
      this.rFile = null;
      this.fileOperation = null;
    }

    public RFile getRFile() {
      return this.rFile;
    }

    public doVote_args setRFile(RFile rFile) {
      this.rFile = rFile;
      return this;
    }

    public void unsetRFile() {
      this.rFile = null;
    }

    /** Returns true if field rFile is set (has been assigned a value) and false otherwise */
    public boolean isSetRFile() {
      return this.rFile != null;
    }

    public void setRFileIsSet(boolean value) {
      if (!value) {
        this.rFile = null;
      }
    }

    public FileOperation getFileOperation() {
      return this.fileOperation;
    }

    public doVote_args setFileOperation(FileOperation fileOperation) {
      this.fileOperation = fileOperation;
      return this;
    }

    public void unsetFileOperation() {
      this.fileOperation = null;
    }

    /** Returns true if field fileOperation is set (has been assigned a value) and false otherwise */
    public boolean isSetFileOperation() {
      return this.fileOperation != null;
    }

    public void setFileOperationIsSet(boolean value) {
      if (!value) {
        this.fileOperation = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case R_FILE:
        if (value == null) {
          unsetRFile();
        } else {
          setRFile((RFile)value);
        }
        break;

      case FILE_OPERATION:
        if (value == null) {
          unsetFileOperation();
        } else {
          setFileOperation((FileOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case R_FILE:
        return getRFile();

      case FILE_OPERATION:
        return getFileOperation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case R_FILE:
        return isSetRFile();
      case FILE_OPERATION:
        return isSetFileOperation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doVote_args)
        return this.equals((doVote_args)that);
      return false;
    }

    public boolean equals(doVote_args that) {
      if (that == null)
        return false;

      boolean this_present_rFile = true && this.isSetRFile();
      boolean that_present_rFile = true && that.isSetRFile();
      if (this_present_rFile || that_present_rFile) {
        if (!(this_present_rFile && that_present_rFile))
          return false;
        if (!this.rFile.equals(that.rFile))
          return false;
      }

      boolean this_present_fileOperation = true && this.isSetFileOperation();
      boolean that_present_fileOperation = true && that.isSetFileOperation();
      if (this_present_fileOperation || that_present_fileOperation) {
        if (!(this_present_fileOperation && that_present_fileOperation))
          return false;
        if (!this.fileOperation.equals(that.fileOperation))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rFile = true && (isSetRFile());
      list.add(present_rFile);
      if (present_rFile)
        list.add(rFile);

      boolean present_fileOperation = true && (isSetFileOperation());
      list.add(present_fileOperation);
      if (present_fileOperation)
        list.add(fileOperation);

      return list.hashCode();
    }

    @Override
    public int compareTo(doVote_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRFile()).compareTo(other.isSetRFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rFile, other.rFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileOperation()).compareTo(other.isSetFileOperation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileOperation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileOperation, other.fileOperation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doVote_args(");
      boolean first = true;

      sb.append("rFile:");
      if (this.rFile == null) {
        sb.append("null");
      } else {
        sb.append(this.rFile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileOperation:");
      if (this.fileOperation == null) {
        sb.append("null");
      } else {
        sb.append(this.fileOperation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rFile != null) {
        rFile.validate();
      }
      if (fileOperation != null) {
        fileOperation.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doVote_argsStandardSchemeFactory implements SchemeFactory {
      public doVote_argsStandardScheme getScheme() {
        return new doVote_argsStandardScheme();
      }
    }

    private static class doVote_argsStandardScheme extends StandardScheme<doVote_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doVote_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // R_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rFile = new RFile();
                struct.rFile.read(iprot);
                struct.setRFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_OPERATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fileOperation = new FileOperation();
                struct.fileOperation.read(iprot);
                struct.setFileOperationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doVote_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rFile != null) {
          oprot.writeFieldBegin(R_FILE_FIELD_DESC);
          struct.rFile.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fileOperation != null) {
          oprot.writeFieldBegin(FILE_OPERATION_FIELD_DESC);
          struct.fileOperation.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doVote_argsTupleSchemeFactory implements SchemeFactory {
      public doVote_argsTupleScheme getScheme() {
        return new doVote_argsTupleScheme();
      }
    }

    private static class doVote_argsTupleScheme extends TupleScheme<doVote_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doVote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRFile()) {
          optionals.set(0);
        }
        if (struct.isSetFileOperation()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRFile()) {
          struct.rFile.write(oprot);
        }
        if (struct.isSetFileOperation()) {
          struct.fileOperation.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doVote_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rFile = new RFile();
          struct.rFile.read(iprot);
          struct.setRFileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileOperation = new FileOperation();
          struct.fileOperation.read(iprot);
          struct.setFileOperationIsSet(true);
        }
      }
    }

  }

  public static class doVote_result implements org.apache.thrift.TBase<doVote_result, doVote_result._Fields>, java.io.Serializable, Cloneable, Comparable<doVote_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doVote_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doVote_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doVote_resultTupleSchemeFactory());
    }

    public StatusReport success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusReport.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doVote_result.class, metaDataMap);
    }

    public doVote_result() {
    }

    public doVote_result(
      StatusReport success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doVote_result(doVote_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatusReport(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public doVote_result deepCopy() {
      return new doVote_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public StatusReport getSuccess() {
      return this.success;
    }

    public doVote_result setSuccess(StatusReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public doVote_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatusReport)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doVote_result)
        return this.equals((doVote_result)that);
      return false;
    }

    public boolean equals(doVote_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_systemException = true && (isSetSystemException());
      list.add(present_systemException);
      if (present_systemException)
        list.add(systemException);

      return list.hashCode();
    }

    @Override
    public int compareTo(doVote_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doVote_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doVote_resultStandardSchemeFactory implements SchemeFactory {
      public doVote_resultStandardScheme getScheme() {
        return new doVote_resultStandardScheme();
      }
    }

    private static class doVote_resultStandardScheme extends StandardScheme<doVote_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doVote_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StatusReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doVote_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doVote_resultTupleSchemeFactory implements SchemeFactory {
      public doVote_resultTupleScheme getScheme() {
        return new doVote_resultTupleScheme();
      }
    }

    private static class doVote_resultTupleScheme extends TupleScheme<doVote_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doVote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doVote_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new StatusReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class doCommitRead_args implements org.apache.thrift.TBase<doCommitRead_args, doCommitRead_args._Fields>, java.io.Serializable, Cloneable, Comparable<doCommitRead_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doCommitRead_args");

    private static final org.apache.thrift.protocol.TField FILENAME_TO_READ_FIELD_DESC = new org.apache.thrift.protocol.TField("filenameToRead", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doCommitRead_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doCommitRead_argsTupleSchemeFactory());
    }

    public String filenameToRead; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME_TO_READ((short)1, "filenameToRead");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME_TO_READ
            return FILENAME_TO_READ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME_TO_READ, new org.apache.thrift.meta_data.FieldMetaData("filenameToRead", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doCommitRead_args.class, metaDataMap);
    }

    public doCommitRead_args() {
    }

    public doCommitRead_args(
      String filenameToRead)
    {
      this();
      this.filenameToRead = filenameToRead;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doCommitRead_args(doCommitRead_args other) {
      if (other.isSetFilenameToRead()) {
        this.filenameToRead = other.filenameToRead;
      }
    }

    public doCommitRead_args deepCopy() {
      return new doCommitRead_args(this);
    }

    @Override
    public void clear() {
      this.filenameToRead = null;
    }

    public String getFilenameToRead() {
      return this.filenameToRead;
    }

    public doCommitRead_args setFilenameToRead(String filenameToRead) {
      this.filenameToRead = filenameToRead;
      return this;
    }

    public void unsetFilenameToRead() {
      this.filenameToRead = null;
    }

    /** Returns true if field filenameToRead is set (has been assigned a value) and false otherwise */
    public boolean isSetFilenameToRead() {
      return this.filenameToRead != null;
    }

    public void setFilenameToReadIsSet(boolean value) {
      if (!value) {
        this.filenameToRead = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILENAME_TO_READ:
        if (value == null) {
          unsetFilenameToRead();
        } else {
          setFilenameToRead((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME_TO_READ:
        return getFilenameToRead();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILENAME_TO_READ:
        return isSetFilenameToRead();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doCommitRead_args)
        return this.equals((doCommitRead_args)that);
      return false;
    }

    public boolean equals(doCommitRead_args that) {
      if (that == null)
        return false;

      boolean this_present_filenameToRead = true && this.isSetFilenameToRead();
      boolean that_present_filenameToRead = true && that.isSetFilenameToRead();
      if (this_present_filenameToRead || that_present_filenameToRead) {
        if (!(this_present_filenameToRead && that_present_filenameToRead))
          return false;
        if (!this.filenameToRead.equals(that.filenameToRead))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_filenameToRead = true && (isSetFilenameToRead());
      list.add(present_filenameToRead);
      if (present_filenameToRead)
        list.add(filenameToRead);

      return list.hashCode();
    }

    @Override
    public int compareTo(doCommitRead_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilenameToRead()).compareTo(other.isSetFilenameToRead());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilenameToRead()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filenameToRead, other.filenameToRead);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doCommitRead_args(");
      boolean first = true;

      sb.append("filenameToRead:");
      if (this.filenameToRead == null) {
        sb.append("null");
      } else {
        sb.append(this.filenameToRead);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doCommitRead_argsStandardSchemeFactory implements SchemeFactory {
      public doCommitRead_argsStandardScheme getScheme() {
        return new doCommitRead_argsStandardScheme();
      }
    }

    private static class doCommitRead_argsStandardScheme extends StandardScheme<doCommitRead_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doCommitRead_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME_TO_READ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filenameToRead = iprot.readString();
                struct.setFilenameToReadIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doCommitRead_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filenameToRead != null) {
          oprot.writeFieldBegin(FILENAME_TO_READ_FIELD_DESC);
          oprot.writeString(struct.filenameToRead);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doCommitRead_argsTupleSchemeFactory implements SchemeFactory {
      public doCommitRead_argsTupleScheme getScheme() {
        return new doCommitRead_argsTupleScheme();
      }
    }

    private static class doCommitRead_argsTupleScheme extends TupleScheme<doCommitRead_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doCommitRead_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilenameToRead()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFilenameToRead()) {
          oprot.writeString(struct.filenameToRead);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doCommitRead_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.filenameToRead = iprot.readString();
          struct.setFilenameToReadIsSet(true);
        }
      }
    }

  }

  public static class doCommitRead_result implements org.apache.thrift.TBase<doCommitRead_result, doCommitRead_result._Fields>, java.io.Serializable, Cloneable, Comparable<doCommitRead_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doCommitRead_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doCommitRead_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doCommitRead_resultTupleSchemeFactory());
    }

    public RFile success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RFile.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doCommitRead_result.class, metaDataMap);
    }

    public doCommitRead_result() {
    }

    public doCommitRead_result(
      RFile success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doCommitRead_result(doCommitRead_result other) {
      if (other.isSetSuccess()) {
        this.success = new RFile(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public doCommitRead_result deepCopy() {
      return new doCommitRead_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public RFile getSuccess() {
      return this.success;
    }

    public doCommitRead_result setSuccess(RFile success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public doCommitRead_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RFile)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doCommitRead_result)
        return this.equals((doCommitRead_result)that);
      return false;
    }

    public boolean equals(doCommitRead_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_systemException = true && (isSetSystemException());
      list.add(present_systemException);
      if (present_systemException)
        list.add(systemException);

      return list.hashCode();
    }

    @Override
    public int compareTo(doCommitRead_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doCommitRead_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doCommitRead_resultStandardSchemeFactory implements SchemeFactory {
      public doCommitRead_resultStandardScheme getScheme() {
        return new doCommitRead_resultStandardScheme();
      }
    }

    private static class doCommitRead_resultStandardScheme extends StandardScheme<doCommitRead_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doCommitRead_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RFile();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doCommitRead_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doCommitRead_resultTupleSchemeFactory implements SchemeFactory {
      public doCommitRead_resultTupleScheme getScheme() {
        return new doCommitRead_resultTupleScheme();
      }
    }

    private static class doCommitRead_resultTupleScheme extends TupleScheme<doCommitRead_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doCommitRead_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doCommitRead_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RFile();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class doCommitWrite_args implements org.apache.thrift.TBase<doCommitWrite_args, doCommitWrite_args._Fields>, java.io.Serializable, Cloneable, Comparable<doCommitWrite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doCommitWrite_args");

    private static final org.apache.thrift.protocol.TField R_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("rFile", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doCommitWrite_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doCommitWrite_argsTupleSchemeFactory());
    }

    public RFile rFile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      R_FILE((short)1, "rFile");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // R_FILE
            return R_FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.R_FILE, new org.apache.thrift.meta_data.FieldMetaData("rFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RFile.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doCommitWrite_args.class, metaDataMap);
    }

    public doCommitWrite_args() {
    }

    public doCommitWrite_args(
      RFile rFile)
    {
      this();
      this.rFile = rFile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doCommitWrite_args(doCommitWrite_args other) {
      if (other.isSetRFile()) {
        this.rFile = new RFile(other.rFile);
      }
    }

    public doCommitWrite_args deepCopy() {
      return new doCommitWrite_args(this);
    }

    @Override
    public void clear() {
      this.rFile = null;
    }

    public RFile getRFile() {
      return this.rFile;
    }

    public doCommitWrite_args setRFile(RFile rFile) {
      this.rFile = rFile;
      return this;
    }

    public void unsetRFile() {
      this.rFile = null;
    }

    /** Returns true if field rFile is set (has been assigned a value) and false otherwise */
    public boolean isSetRFile() {
      return this.rFile != null;
    }

    public void setRFileIsSet(boolean value) {
      if (!value) {
        this.rFile = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case R_FILE:
        if (value == null) {
          unsetRFile();
        } else {
          setRFile((RFile)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case R_FILE:
        return getRFile();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case R_FILE:
        return isSetRFile();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doCommitWrite_args)
        return this.equals((doCommitWrite_args)that);
      return false;
    }

    public boolean equals(doCommitWrite_args that) {
      if (that == null)
        return false;

      boolean this_present_rFile = true && this.isSetRFile();
      boolean that_present_rFile = true && that.isSetRFile();
      if (this_present_rFile || that_present_rFile) {
        if (!(this_present_rFile && that_present_rFile))
          return false;
        if (!this.rFile.equals(that.rFile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rFile = true && (isSetRFile());
      list.add(present_rFile);
      if (present_rFile)
        list.add(rFile);

      return list.hashCode();
    }

    @Override
    public int compareTo(doCommitWrite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRFile()).compareTo(other.isSetRFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rFile, other.rFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doCommitWrite_args(");
      boolean first = true;

      sb.append("rFile:");
      if (this.rFile == null) {
        sb.append("null");
      } else {
        sb.append(this.rFile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rFile != null) {
        rFile.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doCommitWrite_argsStandardSchemeFactory implements SchemeFactory {
      public doCommitWrite_argsStandardScheme getScheme() {
        return new doCommitWrite_argsStandardScheme();
      }
    }

    private static class doCommitWrite_argsStandardScheme extends StandardScheme<doCommitWrite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doCommitWrite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // R_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rFile = new RFile();
                struct.rFile.read(iprot);
                struct.setRFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doCommitWrite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rFile != null) {
          oprot.writeFieldBegin(R_FILE_FIELD_DESC);
          struct.rFile.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doCommitWrite_argsTupleSchemeFactory implements SchemeFactory {
      public doCommitWrite_argsTupleScheme getScheme() {
        return new doCommitWrite_argsTupleScheme();
      }
    }

    private static class doCommitWrite_argsTupleScheme extends TupleScheme<doCommitWrite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doCommitWrite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRFile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRFile()) {
          struct.rFile.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doCommitWrite_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rFile = new RFile();
          struct.rFile.read(iprot);
          struct.setRFileIsSet(true);
        }
      }
    }

  }

  public static class doCommitWrite_result implements org.apache.thrift.TBase<doCommitWrite_result, doCommitWrite_result._Fields>, java.io.Serializable, Cloneable, Comparable<doCommitWrite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doCommitWrite_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doCommitWrite_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doCommitWrite_resultTupleSchemeFactory());
    }

    public StatusReport success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusReport.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doCommitWrite_result.class, metaDataMap);
    }

    public doCommitWrite_result() {
    }

    public doCommitWrite_result(
      StatusReport success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doCommitWrite_result(doCommitWrite_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatusReport(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public doCommitWrite_result deepCopy() {
      return new doCommitWrite_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public StatusReport getSuccess() {
      return this.success;
    }

    public doCommitWrite_result setSuccess(StatusReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public doCommitWrite_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatusReport)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doCommitWrite_result)
        return this.equals((doCommitWrite_result)that);
      return false;
    }

    public boolean equals(doCommitWrite_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_systemException = true && (isSetSystemException());
      list.add(present_systemException);
      if (present_systemException)
        list.add(systemException);

      return list.hashCode();
    }

    @Override
    public int compareTo(doCommitWrite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doCommitWrite_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doCommitWrite_resultStandardSchemeFactory implements SchemeFactory {
      public doCommitWrite_resultStandardScheme getScheme() {
        return new doCommitWrite_resultStandardScheme();
      }
    }

    private static class doCommitWrite_resultStandardScheme extends StandardScheme<doCommitWrite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doCommitWrite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StatusReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doCommitWrite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doCommitWrite_resultTupleSchemeFactory implements SchemeFactory {
      public doCommitWrite_resultTupleScheme getScheme() {
        return new doCommitWrite_resultTupleScheme();
      }
    }

    private static class doCommitWrite_resultTupleScheme extends TupleScheme<doCommitWrite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doCommitWrite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doCommitWrite_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new StatusReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class doCommitDelete_args implements org.apache.thrift.TBase<doCommitDelete_args, doCommitDelete_args._Fields>, java.io.Serializable, Cloneable, Comparable<doCommitDelete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doCommitDelete_args");

    private static final org.apache.thrift.protocol.TField FILENAME_TO_DELETE_FIELD_DESC = new org.apache.thrift.protocol.TField("filenameToDelete", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doCommitDelete_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doCommitDelete_argsTupleSchemeFactory());
    }

    public String filenameToDelete; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME_TO_DELETE((short)1, "filenameToDelete");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME_TO_DELETE
            return FILENAME_TO_DELETE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME_TO_DELETE, new org.apache.thrift.meta_data.FieldMetaData("filenameToDelete", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doCommitDelete_args.class, metaDataMap);
    }

    public doCommitDelete_args() {
    }

    public doCommitDelete_args(
      String filenameToDelete)
    {
      this();
      this.filenameToDelete = filenameToDelete;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doCommitDelete_args(doCommitDelete_args other) {
      if (other.isSetFilenameToDelete()) {
        this.filenameToDelete = other.filenameToDelete;
      }
    }

    public doCommitDelete_args deepCopy() {
      return new doCommitDelete_args(this);
    }

    @Override
    public void clear() {
      this.filenameToDelete = null;
    }

    public String getFilenameToDelete() {
      return this.filenameToDelete;
    }

    public doCommitDelete_args setFilenameToDelete(String filenameToDelete) {
      this.filenameToDelete = filenameToDelete;
      return this;
    }

    public void unsetFilenameToDelete() {
      this.filenameToDelete = null;
    }

    /** Returns true if field filenameToDelete is set (has been assigned a value) and false otherwise */
    public boolean isSetFilenameToDelete() {
      return this.filenameToDelete != null;
    }

    public void setFilenameToDeleteIsSet(boolean value) {
      if (!value) {
        this.filenameToDelete = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILENAME_TO_DELETE:
        if (value == null) {
          unsetFilenameToDelete();
        } else {
          setFilenameToDelete((String)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME_TO_DELETE:
        return getFilenameToDelete();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILENAME_TO_DELETE:
        return isSetFilenameToDelete();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doCommitDelete_args)
        return this.equals((doCommitDelete_args)that);
      return false;
    }

    public boolean equals(doCommitDelete_args that) {
      if (that == null)
        return false;

      boolean this_present_filenameToDelete = true && this.isSetFilenameToDelete();
      boolean that_present_filenameToDelete = true && that.isSetFilenameToDelete();
      if (this_present_filenameToDelete || that_present_filenameToDelete) {
        if (!(this_present_filenameToDelete && that_present_filenameToDelete))
          return false;
        if (!this.filenameToDelete.equals(that.filenameToDelete))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_filenameToDelete = true && (isSetFilenameToDelete());
      list.add(present_filenameToDelete);
      if (present_filenameToDelete)
        list.add(filenameToDelete);

      return list.hashCode();
    }

    @Override
    public int compareTo(doCommitDelete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilenameToDelete()).compareTo(other.isSetFilenameToDelete());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilenameToDelete()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filenameToDelete, other.filenameToDelete);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doCommitDelete_args(");
      boolean first = true;

      sb.append("filenameToDelete:");
      if (this.filenameToDelete == null) {
        sb.append("null");
      } else {
        sb.append(this.filenameToDelete);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doCommitDelete_argsStandardSchemeFactory implements SchemeFactory {
      public doCommitDelete_argsStandardScheme getScheme() {
        return new doCommitDelete_argsStandardScheme();
      }
    }

    private static class doCommitDelete_argsStandardScheme extends StandardScheme<doCommitDelete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doCommitDelete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME_TO_DELETE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filenameToDelete = iprot.readString();
                struct.setFilenameToDeleteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doCommitDelete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filenameToDelete != null) {
          oprot.writeFieldBegin(FILENAME_TO_DELETE_FIELD_DESC);
          oprot.writeString(struct.filenameToDelete);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doCommitDelete_argsTupleSchemeFactory implements SchemeFactory {
      public doCommitDelete_argsTupleScheme getScheme() {
        return new doCommitDelete_argsTupleScheme();
      }
    }

    private static class doCommitDelete_argsTupleScheme extends TupleScheme<doCommitDelete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doCommitDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilenameToDelete()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFilenameToDelete()) {
          oprot.writeString(struct.filenameToDelete);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doCommitDelete_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.filenameToDelete = iprot.readString();
          struct.setFilenameToDeleteIsSet(true);
        }
      }
    }

  }

  public static class doCommitDelete_result implements org.apache.thrift.TBase<doCommitDelete_result, doCommitDelete_result._Fields>, java.io.Serializable, Cloneable, Comparable<doCommitDelete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doCommitDelete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doCommitDelete_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doCommitDelete_resultTupleSchemeFactory());
    }

    public StatusReport success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusReport.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doCommitDelete_result.class, metaDataMap);
    }

    public doCommitDelete_result() {
    }

    public doCommitDelete_result(
      StatusReport success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doCommitDelete_result(doCommitDelete_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatusReport(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public doCommitDelete_result deepCopy() {
      return new doCommitDelete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public StatusReport getSuccess() {
      return this.success;
    }

    public doCommitDelete_result setSuccess(StatusReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public doCommitDelete_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatusReport)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doCommitDelete_result)
        return this.equals((doCommitDelete_result)that);
      return false;
    }

    public boolean equals(doCommitDelete_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_systemException = true && (isSetSystemException());
      list.add(present_systemException);
      if (present_systemException)
        list.add(systemException);

      return list.hashCode();
    }

    @Override
    public int compareTo(doCommitDelete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doCommitDelete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doCommitDelete_resultStandardSchemeFactory implements SchemeFactory {
      public doCommitDelete_resultStandardScheme getScheme() {
        return new doCommitDelete_resultStandardScheme();
      }
    }

    private static class doCommitDelete_resultStandardScheme extends StandardScheme<doCommitDelete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doCommitDelete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StatusReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doCommitDelete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doCommitDelete_resultTupleSchemeFactory implements SchemeFactory {
      public doCommitDelete_resultTupleScheme getScheme() {
        return new doCommitDelete_resultTupleScheme();
      }
    }

    private static class doCommitDelete_resultTupleScheme extends TupleScheme<doCommitDelete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doCommitDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doCommitDelete_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new StatusReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class doAbort_args implements org.apache.thrift.TBase<doAbort_args, doAbort_args._Fields>, java.io.Serializable, Cloneable, Comparable<doAbort_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doAbort_args");

    private static final org.apache.thrift.protocol.TField R_FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("rFile", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("fileOperation", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doAbort_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doAbort_argsTupleSchemeFactory());
    }

    public RFile rFile; // required
    public FileOperation fileOperation; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      R_FILE((short)1, "rFile"),
      FILE_OPERATION((short)2, "fileOperation");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // R_FILE
            return R_FILE;
          case 2: // FILE_OPERATION
            return FILE_OPERATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.R_FILE, new org.apache.thrift.meta_data.FieldMetaData("rFile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RFile.class)));
      tmpMap.put(_Fields.FILE_OPERATION, new org.apache.thrift.meta_data.FieldMetaData("fileOperation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileOperation.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doAbort_args.class, metaDataMap);
    }

    public doAbort_args() {
    }

    public doAbort_args(
      RFile rFile,
      FileOperation fileOperation)
    {
      this();
      this.rFile = rFile;
      this.fileOperation = fileOperation;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doAbort_args(doAbort_args other) {
      if (other.isSetRFile()) {
        this.rFile = new RFile(other.rFile);
      }
      if (other.isSetFileOperation()) {
        this.fileOperation = new FileOperation(other.fileOperation);
      }
    }

    public doAbort_args deepCopy() {
      return new doAbort_args(this);
    }

    @Override
    public void clear() {
      this.rFile = null;
      this.fileOperation = null;
    }

    public RFile getRFile() {
      return this.rFile;
    }

    public doAbort_args setRFile(RFile rFile) {
      this.rFile = rFile;
      return this;
    }

    public void unsetRFile() {
      this.rFile = null;
    }

    /** Returns true if field rFile is set (has been assigned a value) and false otherwise */
    public boolean isSetRFile() {
      return this.rFile != null;
    }

    public void setRFileIsSet(boolean value) {
      if (!value) {
        this.rFile = null;
      }
    }

    public FileOperation getFileOperation() {
      return this.fileOperation;
    }

    public doAbort_args setFileOperation(FileOperation fileOperation) {
      this.fileOperation = fileOperation;
      return this;
    }

    public void unsetFileOperation() {
      this.fileOperation = null;
    }

    /** Returns true if field fileOperation is set (has been assigned a value) and false otherwise */
    public boolean isSetFileOperation() {
      return this.fileOperation != null;
    }

    public void setFileOperationIsSet(boolean value) {
      if (!value) {
        this.fileOperation = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case R_FILE:
        if (value == null) {
          unsetRFile();
        } else {
          setRFile((RFile)value);
        }
        break;

      case FILE_OPERATION:
        if (value == null) {
          unsetFileOperation();
        } else {
          setFileOperation((FileOperation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case R_FILE:
        return getRFile();

      case FILE_OPERATION:
        return getFileOperation();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case R_FILE:
        return isSetRFile();
      case FILE_OPERATION:
        return isSetFileOperation();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doAbort_args)
        return this.equals((doAbort_args)that);
      return false;
    }

    public boolean equals(doAbort_args that) {
      if (that == null)
        return false;

      boolean this_present_rFile = true && this.isSetRFile();
      boolean that_present_rFile = true && that.isSetRFile();
      if (this_present_rFile || that_present_rFile) {
        if (!(this_present_rFile && that_present_rFile))
          return false;
        if (!this.rFile.equals(that.rFile))
          return false;
      }

      boolean this_present_fileOperation = true && this.isSetFileOperation();
      boolean that_present_fileOperation = true && that.isSetFileOperation();
      if (this_present_fileOperation || that_present_fileOperation) {
        if (!(this_present_fileOperation && that_present_fileOperation))
          return false;
        if (!this.fileOperation.equals(that.fileOperation))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_rFile = true && (isSetRFile());
      list.add(present_rFile);
      if (present_rFile)
        list.add(rFile);

      boolean present_fileOperation = true && (isSetFileOperation());
      list.add(present_fileOperation);
      if (present_fileOperation)
        list.add(fileOperation);

      return list.hashCode();
    }

    @Override
    public int compareTo(doAbort_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRFile()).compareTo(other.isSetRFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rFile, other.rFile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileOperation()).compareTo(other.isSetFileOperation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileOperation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileOperation, other.fileOperation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doAbort_args(");
      boolean first = true;

      sb.append("rFile:");
      if (this.rFile == null) {
        sb.append("null");
      } else {
        sb.append(this.rFile);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileOperation:");
      if (this.fileOperation == null) {
        sb.append("null");
      } else {
        sb.append(this.fileOperation);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rFile != null) {
        rFile.validate();
      }
      if (fileOperation != null) {
        fileOperation.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doAbort_argsStandardSchemeFactory implements SchemeFactory {
      public doAbort_argsStandardScheme getScheme() {
        return new doAbort_argsStandardScheme();
      }
    }

    private static class doAbort_argsStandardScheme extends StandardScheme<doAbort_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doAbort_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // R_FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rFile = new RFile();
                struct.rFile.read(iprot);
                struct.setRFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_OPERATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fileOperation = new FileOperation();
                struct.fileOperation.read(iprot);
                struct.setFileOperationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doAbort_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rFile != null) {
          oprot.writeFieldBegin(R_FILE_FIELD_DESC);
          struct.rFile.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fileOperation != null) {
          oprot.writeFieldBegin(FILE_OPERATION_FIELD_DESC);
          struct.fileOperation.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doAbort_argsTupleSchemeFactory implements SchemeFactory {
      public doAbort_argsTupleScheme getScheme() {
        return new doAbort_argsTupleScheme();
      }
    }

    private static class doAbort_argsTupleScheme extends TupleScheme<doAbort_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doAbort_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRFile()) {
          optionals.set(0);
        }
        if (struct.isSetFileOperation()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRFile()) {
          struct.rFile.write(oprot);
        }
        if (struct.isSetFileOperation()) {
          struct.fileOperation.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doAbort_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rFile = new RFile();
          struct.rFile.read(iprot);
          struct.setRFileIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileOperation = new FileOperation();
          struct.fileOperation.read(iprot);
          struct.setFileOperationIsSet(true);
        }
      }
    }

  }

  public static class doAbort_result implements org.apache.thrift.TBase<doAbort_result, doAbort_result._Fields>, java.io.Serializable, Cloneable, Comparable<doAbort_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("doAbort_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new doAbort_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new doAbort_resultTupleSchemeFactory());
    }

    public StatusReport success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, StatusReport.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(doAbort_result.class, metaDataMap);
    }

    public doAbort_result() {
    }

    public doAbort_result(
      StatusReport success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public doAbort_result(doAbort_result other) {
      if (other.isSetSuccess()) {
        this.success = new StatusReport(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public doAbort_result deepCopy() {
      return new doAbort_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public StatusReport getSuccess() {
      return this.success;
    }

    public doAbort_result setSuccess(StatusReport success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public doAbort_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((StatusReport)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof doAbort_result)
        return this.equals((doAbort_result)that);
      return false;
    }

    public boolean equals(doAbort_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_systemException = true && (isSetSystemException());
      list.add(present_systemException);
      if (present_systemException)
        list.add(systemException);

      return list.hashCode();
    }

    @Override
    public int compareTo(doAbort_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("doAbort_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class doAbort_resultStandardSchemeFactory implements SchemeFactory {
      public doAbort_resultStandardScheme getScheme() {
        return new doAbort_resultStandardScheme();
      }
    }

    private static class doAbort_resultStandardScheme extends StandardScheme<doAbort_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, doAbort_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new StatusReport();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, doAbort_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class doAbort_resultTupleSchemeFactory implements SchemeFactory {
      public doAbort_resultTupleScheme getScheme() {
        return new doAbort_resultTupleScheme();
      }
    }

    private static class doAbort_resultTupleScheme extends TupleScheme<doAbort_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, doAbort_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, doAbort_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new StatusReport();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

  public static class getRecoveryInformation_args implements org.apache.thrift.TBase<getRecoveryInformation_args, getRecoveryInformation_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRecoveryInformation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecoveryInformation_args");

    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_OPERATION_FIELD_DESC = new org.apache.thrift.protocol.TField("fileOperation", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecoveryInformation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecoveryInformation_argsTupleSchemeFactory());
    }

    public String filename; // required
    public FileOperation fileOperation; // required
    public String hostname; // required
    public int port; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME((short)1, "filename"),
      FILE_OPERATION((short)2, "fileOperation"),
      HOSTNAME((short)3, "hostname"),
      PORT((short)4, "port");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME
            return FILENAME;
          case 2: // FILE_OPERATION
            return FILE_OPERATION;
          case 3: // HOSTNAME
            return HOSTNAME;
          case 4: // PORT
            return PORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE_OPERATION, new org.apache.thrift.meta_data.FieldMetaData("fileOperation", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, FileOperation.class)));
      tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecoveryInformation_args.class, metaDataMap);
    }

    public getRecoveryInformation_args() {
    }

    public getRecoveryInformation_args(
      String filename,
      FileOperation fileOperation,
      String hostname,
      int port)
    {
      this();
      this.filename = filename;
      this.fileOperation = fileOperation;
      this.hostname = hostname;
      this.port = port;
      setPortIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecoveryInformation_args(getRecoveryInformation_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
      if (other.isSetFileOperation()) {
        this.fileOperation = new FileOperation(other.fileOperation);
      }
      if (other.isSetHostname()) {
        this.hostname = other.hostname;
      }
      this.port = other.port;
    }

    public getRecoveryInformation_args deepCopy() {
      return new getRecoveryInformation_args(this);
    }

    @Override
    public void clear() {
      this.filename = null;
      this.fileOperation = null;
      this.hostname = null;
      setPortIsSet(false);
      this.port = 0;
    }

    public String getFilename() {
      return this.filename;
    }

    public getRecoveryInformation_args setFilename(String filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /** Returns true if field filename is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public FileOperation getFileOperation() {
      return this.fileOperation;
    }

    public getRecoveryInformation_args setFileOperation(FileOperation fileOperation) {
      this.fileOperation = fileOperation;
      return this;
    }

    public void unsetFileOperation() {
      this.fileOperation = null;
    }

    /** Returns true if field fileOperation is set (has been assigned a value) and false otherwise */
    public boolean isSetFileOperation() {
      return this.fileOperation != null;
    }

    public void setFileOperationIsSet(boolean value) {
      if (!value) {
        this.fileOperation = null;
      }
    }

    public String getHostname() {
      return this.hostname;
    }

    public getRecoveryInformation_args setHostname(String hostname) {
      this.hostname = hostname;
      return this;
    }

    public void unsetHostname() {
      this.hostname = null;
    }

    /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
    public boolean isSetHostname() {
      return this.hostname != null;
    }

    public void setHostnameIsSet(boolean value) {
      if (!value) {
        this.hostname = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public getRecoveryInformation_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      case FILE_OPERATION:
        if (value == null) {
          unsetFileOperation();
        } else {
          setFileOperation((FileOperation)value);
        }
        break;

      case HOSTNAME:
        if (value == null) {
          unsetHostname();
        } else {
          setHostname((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME:
        return getFilename();

      case FILE_OPERATION:
        return getFileOperation();

      case HOSTNAME:
        return getHostname();

      case PORT:
        return Integer.valueOf(getPort());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILENAME:
        return isSetFilename();
      case FILE_OPERATION:
        return isSetFileOperation();
      case HOSTNAME:
        return isSetHostname();
      case PORT:
        return isSetPort();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecoveryInformation_args)
        return this.equals((getRecoveryInformation_args)that);
      return false;
    }

    public boolean equals(getRecoveryInformation_args that) {
      if (that == null)
        return false;

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      boolean this_present_fileOperation = true && this.isSetFileOperation();
      boolean that_present_fileOperation = true && that.isSetFileOperation();
      if (this_present_fileOperation || that_present_fileOperation) {
        if (!(this_present_fileOperation && that_present_fileOperation))
          return false;
        if (!this.fileOperation.equals(that.fileOperation))
          return false;
      }

      boolean this_present_hostname = true && this.isSetHostname();
      boolean that_present_hostname = true && that.isSetHostname();
      if (this_present_hostname || that_present_hostname) {
        if (!(this_present_hostname && that_present_hostname))
          return false;
        if (!this.hostname.equals(that.hostname))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_filename = true && (isSetFilename());
      list.add(present_filename);
      if (present_filename)
        list.add(filename);

      boolean present_fileOperation = true && (isSetFileOperation());
      list.add(present_fileOperation);
      if (present_fileOperation)
        list.add(fileOperation);

      boolean present_hostname = true && (isSetHostname());
      list.add(present_hostname);
      if (present_hostname)
        list.add(hostname);

      boolean present_port = true;
      list.add(present_port);
      if (present_port)
        list.add(port);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecoveryInformation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFileOperation()).compareTo(other.isSetFileOperation());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileOperation()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileOperation, other.fileOperation);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHostname()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecoveryInformation_args(");
      boolean first = true;

      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileOperation:");
      if (this.fileOperation == null) {
        sb.append("null");
      } else {
        sb.append(this.fileOperation);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("hostname:");
      if (this.hostname == null) {
        sb.append("null");
      } else {
        sb.append(this.hostname);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (fileOperation != null) {
        fileOperation.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecoveryInformation_argsStandardSchemeFactory implements SchemeFactory {
      public getRecoveryInformation_argsStandardScheme getScheme() {
        return new getRecoveryInformation_argsStandardScheme();
      }
    }

    private static class getRecoveryInformation_argsStandardScheme extends StandardScheme<getRecoveryInformation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecoveryInformation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename = iprot.readString();
                struct.setFilenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_OPERATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.fileOperation = new FileOperation();
                struct.fileOperation.read(iprot);
                struct.setFileOperationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // HOSTNAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.hostname = iprot.readString();
                struct.setHostnameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecoveryInformation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
        if (struct.fileOperation != null) {
          oprot.writeFieldBegin(FILE_OPERATION_FIELD_DESC);
          struct.fileOperation.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.hostname != null) {
          oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
          oprot.writeString(struct.hostname);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecoveryInformation_argsTupleSchemeFactory implements SchemeFactory {
      public getRecoveryInformation_argsTupleScheme getScheme() {
        return new getRecoveryInformation_argsTupleScheme();
      }
    }

    private static class getRecoveryInformation_argsTupleScheme extends TupleScheme<getRecoveryInformation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecoveryInformation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilename()) {
          optionals.set(0);
        }
        if (struct.isSetFileOperation()) {
          optionals.set(1);
        }
        if (struct.isSetHostname()) {
          optionals.set(2);
        }
        if (struct.isSetPort()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetFilename()) {
          oprot.writeString(struct.filename);
        }
        if (struct.isSetFileOperation()) {
          struct.fileOperation.write(oprot);
        }
        if (struct.isSetHostname()) {
          oprot.writeString(struct.hostname);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecoveryInformation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.filename = iprot.readString();
          struct.setFilenameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileOperation = new FileOperation();
          struct.fileOperation.read(iprot);
          struct.setFileOperationIsSet(true);
        }
        if (incoming.get(2)) {
          struct.hostname = iprot.readString();
          struct.setHostnameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
      }
    }

  }

  public static class getRecoveryInformation_result implements org.apache.thrift.TBase<getRecoveryInformation_result, getRecoveryInformation_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRecoveryInformation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRecoveryInformation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYSTEM_EXCEPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("systemException", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRecoveryInformation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRecoveryInformation_resultTupleSchemeFactory());
    }

    public RecoveryInformation success; // required
    public SystemException systemException; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYSTEM_EXCEPTION((short)1, "systemException");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYSTEM_EXCEPTION
            return SYSTEM_EXCEPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RecoveryInformation.class)));
      tmpMap.put(_Fields.SYSTEM_EXCEPTION, new org.apache.thrift.meta_data.FieldMetaData("systemException", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRecoveryInformation_result.class, metaDataMap);
    }

    public getRecoveryInformation_result() {
    }

    public getRecoveryInformation_result(
      RecoveryInformation success,
      SystemException systemException)
    {
      this();
      this.success = success;
      this.systemException = systemException;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRecoveryInformation_result(getRecoveryInformation_result other) {
      if (other.isSetSuccess()) {
        this.success = new RecoveryInformation(other.success);
      }
      if (other.isSetSystemException()) {
        this.systemException = new SystemException(other.systemException);
      }
    }

    public getRecoveryInformation_result deepCopy() {
      return new getRecoveryInformation_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.systemException = null;
    }

    public RecoveryInformation getSuccess() {
      return this.success;
    }

    public getRecoveryInformation_result setSuccess(RecoveryInformation success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSystemException() {
      return this.systemException;
    }

    public getRecoveryInformation_result setSystemException(SystemException systemException) {
      this.systemException = systemException;
      return this;
    }

    public void unsetSystemException() {
      this.systemException = null;
    }

    /** Returns true if field systemException is set (has been assigned a value) and false otherwise */
    public boolean isSetSystemException() {
      return this.systemException != null;
    }

    public void setSystemExceptionIsSet(boolean value) {
      if (!value) {
        this.systemException = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((RecoveryInformation)value);
        }
        break;

      case SYSTEM_EXCEPTION:
        if (value == null) {
          unsetSystemException();
        } else {
          setSystemException((SystemException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYSTEM_EXCEPTION:
        return getSystemException();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYSTEM_EXCEPTION:
        return isSetSystemException();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRecoveryInformation_result)
        return this.equals((getRecoveryInformation_result)that);
      return false;
    }

    public boolean equals(getRecoveryInformation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_systemException = true && this.isSetSystemException();
      boolean that_present_systemException = true && that.isSetSystemException();
      if (this_present_systemException || that_present_systemException) {
        if (!(this_present_systemException && that_present_systemException))
          return false;
        if (!this.systemException.equals(that.systemException))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      boolean present_systemException = true && (isSetSystemException());
      list.add(present_systemException);
      if (present_systemException)
        list.add(systemException);

      return list.hashCode();
    }

    @Override
    public int compareTo(getRecoveryInformation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSystemException()).compareTo(other.isSetSystemException());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSystemException()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.systemException, other.systemException);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRecoveryInformation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("systemException:");
      if (this.systemException == null) {
        sb.append("null");
      } else {
        sb.append(this.systemException);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRecoveryInformation_resultStandardSchemeFactory implements SchemeFactory {
      public getRecoveryInformation_resultStandardScheme getScheme() {
        return new getRecoveryInformation_resultStandardScheme();
      }
    }

    private static class getRecoveryInformation_resultStandardScheme extends StandardScheme<getRecoveryInformation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRecoveryInformation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new RecoveryInformation();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYSTEM_EXCEPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.systemException = new SystemException();
                struct.systemException.read(iprot);
                struct.setSystemExceptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRecoveryInformation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.systemException != null) {
          oprot.writeFieldBegin(SYSTEM_EXCEPTION_FIELD_DESC);
          struct.systemException.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRecoveryInformation_resultTupleSchemeFactory implements SchemeFactory {
      public getRecoveryInformation_resultTupleScheme getScheme() {
        return new getRecoveryInformation_resultTupleScheme();
      }
    }

    private static class getRecoveryInformation_resultTupleScheme extends TupleScheme<getRecoveryInformation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRecoveryInformation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSystemException()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSystemException()) {
          struct.systemException.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRecoveryInformation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new RecoveryInformation();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.systemException = new SystemException();
          struct.systemException.read(iprot);
          struct.setSystemExceptionIsSet(true);
        }
      }
    }

  }

}
